[project]
name = "modflow6"
channels = ["conda-forge"]
platforms = ["win-64", "linux-64", "linux-aarch64", "osx-arm64", "osx-64"]
version = "6.6.0.dev0"

[dependencies]
appdirs = "*"
codespell = "*"
filelock = "*"
flaky = "*"
fortran-language-server = "*"
fprettify = "*"
gitpython = "*"
jupytext = "*"
matplotlib = "*"
meson = "1.3.0"
networkx = "*"
ninja = "*"
numpy = "<2.0.0"    # modflowapi has a resriction on the numpy version
pandas = "*"
pip = "*"
pooch = "*"
pydotplus = "*"
pyshp = "*"
pytest = "!=8.1.0"
pytest-benchmark = "*"
pytest-dotenv = "*"
pytest-order = "*"
pytest-xdist = "*"
python = "3.9.*"
rasterio = "*"
rasterstats = "*"
requests = "*"
ruff = "*"
scipy = "*"
shapely = "*"
syrupy = "*"
xmipy = "*"

[feature.rtd.dependencies]
numpy = "*"
bmipy = "*"
sphinx = ">=4"
ipython = "*"
ipykernel = "*"
myst-parser = "*"
sphinx_rtd_theme = ">=1"
pytest = "*"
filelock = "*"
modflow-devtools = "*"

[feature.rtd.pypi-dependencies]
# These dependencies are added as pypi dependencies because an osx-arm64 version of them doesn't exist on conda
sphinx_markdown_tables = "*"
nbsphinx = "*"
nbsphinx_link = "*"
rtds_action = "*"

[environments]
rtd = { features = ["rtd"], solve-group = "default" }

[tasks]
# install
install-flopy = "pip install --no-build-isolation --no-deps --disable-pip-version-check git+https://github.com/modflowpy/flopy.git"
install-pymake = "pip install --no-build-isolation --no-deps --disable-pip-version-check git+https://github.com/modflowpy/pymake.git"
install-modflowapi = "pip install --no-build-isolation --no-deps --disable-pip-version-check git+https://github.com/MODFLOW-USGS/modflowapi.git"
install-modflow-devtools = "pip install --no-build-isolation --no-deps --disable-pip-version-check git+https://github.com/MODFLOW-USGS/modflow-devtools.git"
install = { depends_on = [
    "install-flopy",
    "install-pymake",
    "install-modflowapi",
    "install-modflow-devtools",
] }

# check format
check-format = "python .github/common/check_format.py"
check-mf6ivar = "pixi run run-mf6ivar --check --verbose"
check-vfproj = "python .github/common/check_vfproj.py"
check-spelling = "python .github/common/check_spelling.py"
check-python-lint = { cmd = "ruff check ." }
check-python-format = { cmd = "pixi run fix-python-format --check" }

# fix format
fix-style = { cmd = "pixi run check-format --write-changes; pixi run check-spelling --write-changes" }
fix-python-format = { cmd = "ruff format ." }
fix-python-style = { cmd = "pixi run check-python-lint --fix; pixi run fix-python-format" }

# meson build/test
builddir = "echo _builddir"
setup = "meson setup --prefix=$(pwd) --libdir=bin --bindir=bin"
build = "meson install -C"
test = "meson test --verbose --no-rebuild -C"

# pytest tasks
get-exes = { cmd = "pytest -v --durations 0 get_exes.py", cwd = "autotest" }
autotest = { cmd = "pytest -v -n auto --durations 0 --keep-failed .failed", cwd = "autotest" }

# common developer tasks
update-fortran-definitions = { cmd = "python dfn2f90.py", cwd = "utils/idmloader/scripts" }
update-flopy = { cmd = "python update_flopy.py", cwd = "autotest" }
build-makefiles = { cmd = "python build_makefiles.py", cwd = "distribution" }
run-mf6ivar = { cmd = "python mf6ivar.py", cwd = "doc/mf6io/mf6ivar" }
prepare-pull-request = {depends_on = ["fix-style", "fix-python-style", "build-makefiles", "run-mf6ivar", "update-fortran-definitions"]}

# dist/docs
benchmark = { cmd = "python benchmark.py", cwd = "distribution" }
build-docs = { cmd = "python build_docs.py", cwd = "distribution" }
build-dist = { cmd = "python build_dist.py", cwd = "distribution" }
test-dist-scripts = { cmd = "pytest -v --durations 0", cwd = "distribution" }
update-version = { cmd = "python update_version.py", cwd = "distribution" }
deprecations = { cmd = "python deprecations.py", cwd = "doc/mf6io/mf6ivar" }

[feature.rtd.tasks]
sphinx = { cmd = "make html", cwd = ".build_rtd_docs" }

# os-specific tasks
[target.linux-64.tasks]
builddir = "echo _builddir_linux-64"

[target.linux-aarch64.tasks]
builddir = "echo _builddir_linux-aarch64"

[target.osx-64.tasks]
builddir = "echo _builddir_osx-64"

[target.osx-arm64.tasks]
builddir = "echo _builddir_osx-arm64"

[target.win-64.tasks]
builddir = "echo _builddir_win-64"

