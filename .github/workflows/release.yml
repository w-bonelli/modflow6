name: MODFLOW 6 release
on:
  # workflow_call event lets this workflow be called either
  # from this repo or the nightly build repo for dev builds
  workflow_call:
    inputs:
      approve:
        description: 'Approve the release, modifying disclaimer language to indicate the distribution has been reviewed. If false, disclaimers & version strings indicate preliminary/provisional status.'
        required: false
        type: boolean
        default: false
      branch:
        description: 'Branch to release from.'
        required: true
        type: string
      developmode:
        description: 'Build binaries in develop mode. If false, IDEVELOPMODE is set to 0.'
        required: false
        type: boolean
        default: true
      full:
        description: 'Build a full distribution containing sources, examples, and all documentation. If false, the distribution contains only binaries, mf6io, release notes, and code.json.'
        required: false
        type: boolean
        default: false
      run_tests:
        description: Run tests after building binaries.'
        required: false
        type: boolean
        default: true
      version:
        description: 'Version number to use for release.'
        required: true
        type: string
    outputs:
      version:
        description: 'Version number used for release'
        value: ${{ jobs.build.outputs.version }}
      distname:
        description: 'Distribution name used for release'
        value: ${{ jobs.build.outputs.distname }}
env:
  FC: ifort
jobs:
  build:
    name: Build binaries (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            ostag: linux
          - os: macos-12
            ostag: mac
          - os: windows-2022
            ostag: win64
    defaults:
      run:
        shell: bash -l {0}
    outputs:
      version: ${{ steps.set_version.outputs.version }}
      distname: ${{ steps.set_version.outputs.distname }}
    steps:
      - name: Checkout modflow6
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/modflow6
          path: modflow6
          ref: ${{ inputs.branch }}

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: modflow6/environment.yml
          cache-downloads: true
          cache-environment: true
          init-shell: >-
            bash
            powershell

      - name: Setup Intel Fortran
        uses: modflowpy/install-intelfortran-action@v1

      - name: Set version number
        id: set_version
        run: |
          # distribution name format is 'mf<major.minor.patch[label]>'
          distname="mf${{ inputs.version }}"

          # set step outputs and environment variables
          echo "version=${{ inputs.version }}" >> "$GITHUB_OUTPUT"
          echo "VERSION=${{ inputs.version }}" >> "$GITHUB_ENV"
          echo "distname=$distname" >> "$GITHUB_OUTPUT"
          echo "DISTNAME=$distname" >> "$GITHUB_ENV"

      - name: Update version
        id: update_version
        working-directory: modflow6/distribution
        run: |
          ver="${{ steps.set_version.outputs.version }}"
          cmd="python update_version.py -v $ver"
          if [[ "${{ inputs.approve }}" == "true" ]]; then
            cmd="$cmd --approve"
          fi
          if [[ "${{ inputs.developmode }}" == "false" ]]; then
            cmd="$cmd --releasemode"
          fi
          eval "$cmd"

      - name: Build binaries
        if: runner.os != 'Windows'
        working-directory: modflow6
        run: |
          meson setup builddir -Ddebug=false --prefix=$(pwd) --libdir=bin
          meson install -C builddir
          meson test --verbose --no-rebuild -C builddir

      - name: Build binaries (Windows)
        if: runner.os == 'Windows'
        working-directory: modflow6
        shell: pwsh
        run: |
          meson setup builddir -Ddebug=false --prefix=$(pwd) --libdir=bin
          meson install -C builddir
          meson test --verbose --no-rebuild -C builddir

      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: bin-${{ runner.os }}
          path: modflow6/bin

      # only run steps below if inputs.run_tests is true
      - name: Checkout modflow6-testmodels
        if: inputs.run_tests == true
        uses: actions/checkout@v3
        with:
          repository: MODFLOW-USGS/modflow6-testmodels
          path: modflow6-testmodels

      - name: Checkout modflow6-examples
        if: inputs.run_tests == true
        uses: actions/checkout@v3
        with:
          repository: MODFLOW-USGS/modflow6-examples
          path: modflow6-examples

      - name: Update flopy
        if: inputs.run_tests == true
        working-directory: modflow6/autotest
        run: python update_flopy.py

      - name: Get executables
        if: inputs.run_tests == true
        working-directory: modflow6/autotest
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: pytest -v --durations 0 get_exes.py

      - name: Test modflow6
        if: inputs.run_tests == true && runner.os != 'Windows'
        working-directory: modflow6/autotest
        env:
          REPOS_PATH: ${{ github.workspace }}
        run: |
          markers="not large"
          if [[ "${{ inputs.developmode }}" == "false" ]]; then
            markers="$markers and not developmode"
          fi
          pytest -v -n auto --durations 0 -m "$markers"
      
      - name: Test modflow6 (Windows)
        if: inputs.run_tests == true && runner.os == 'Windows'
        working-directory: modflow6/autotest
        shell: pwsh
        env:
          REPOS_PATH: ${{ github.workspace }}
        run: |
          $markers="not large"
          if ("${{ inputs.developmode }}" -eq "false") {
            $markers="$markers and not developmode"
          }
          pytest -v -n auto --durations 0 -m "$markers"
      
      # steps below run only on Linux to test distribution procedures, e.g.
      # compiling binaries, building documentation
      - name: Checkout usgslatex
        if: ${{ runner.os == 'Linux' && inputs.run_tests == true }}
        uses: actions/checkout@v3
        with:
          repository: MODFLOW-USGS/usgslatex
          path: usgslatex

      - name: Install TeX Live
        if: ${{ runner.os == 'Linux' && inputs.run_tests == true }}
        run: |
          sudo apt-get update
          sudo apt install texlive-science \
            texlive-latex-extra \
            texlive-font-utils \
            texlive-fonts-recommended \
            texlive-fonts-extra

      - name: Install USGS LaTeX style files and Univers font
        if: ${{ runner.os == 'Linux' && inputs.run_tests == true }}
        working-directory: usgslatex/usgsLaTeX
        run: sudo ./install.sh --all-users

      - name: Install dependencies for ex-gwf-twri example model
        if: ${{ runner.os == 'Linux' && inputs.run_tests == true }}
        working-directory: modflow6-examples/etc
        run: |
          # install extra Python packages
          pip install -r requirements.pip.txt

          # the example model needs executables to be on the path
          echo "${{ github.workspace }}/modflow6/bin" >> $GITHUB_PATH
          echo "${{ github.workspace }}/modflow6/bin/downloaded" >> $GITHUB_PATH

      - name: Build ex-gwf-twri example model
        if: ${{ runner.os == 'Linux' && inputs.run_tests == true }}
        working-directory: modflow6-examples/scripts
        run: python ex-gwf-twri.py

      - name: Test distribution scripts
        if: ${{ inputs.run_tests == true }}
        working-directory: modflow6/distribution
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: pytest -v --durations 0

  docs:
    name: Build docs
    needs: build
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash -l {0}
    steps:

      - name: Checkout modflow6
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/modflow6
          path: modflow6
          ref: ${{ inputs.branch }}

      - name: Checkout modflow6-examples
        uses: actions/checkout@v3
        with:
          repository: MODFLOW-USGS/modflow6-examples
          path: modflow6-examples

      - name: Checkout usgslatex
        uses: actions/checkout@v3
        with:
          repository: MODFLOW-USGS/usgslatex
          path: usgslatex

      - name: Install TeX Live
        run: |
          sudo apt-get update
          sudo apt install texlive-science \
            texlive-latex-extra \
            texlive-font-utils \
            texlive-fonts-recommended \
            texlive-fonts-extra

      - name: Install USGS LaTeX style files and Univers font
        working-directory: usgslatex/usgsLaTeX
        run: sudo ./install.sh --all-users

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: modflow6/environment.yml
          cache-downloads: true
          cache-environment: true

      - name: Setup Intel Fortran
        uses: modflowpy/install-intelfortran-action@v1

      - name: Update version
        id: update_version
        working-directory: modflow6/distribution
        run: |
          ver="${{ needs.build.outputs.version }}"
          cmd="python update_version.py -v $ver"
          if [[ "${{ inputs.approve }}" == "true" ]]; then
            cmd="$cmd --approve"
          fi
          if [[ "${{ inputs.developmode }}" == "false" ]]; then
            cmd="$cmd --releasemode"
          fi
          eval "$cmd"

      - name: Download pre-built binaries
        uses: actions/download-artifact@v3
        with:
          name: bin-${{ runner.os }}
          path: bin
    
      - name: Install dependencies for ex-gwf-twri example model
        working-directory: modflow6-examples/etc
        run: |
          # install extra Python packages
          pip install -r requirements.pip.txt
  
          # the example model needs executables to be on the path
          echo "${{ github.workspace }}/bin" >> $GITHUB_PATH

          # execute permissions may not have survived artifact upload/download
          chmod +x "${{ github.workspace }}/bin/mf6"
          chmod +x "${{ github.workspace }}/bin/mf5to6"
          chmod +x "${{ github.workspace }}/bin/zbud6"

          # the example model also needs mf2005
          get-modflow "${{ github.workspace }}/bin" --subset mf2005
  
      - name: Build ex-gwf-twri example model
        working-directory: modflow6-examples/scripts
        run: |
          python ex-gwf-twri.py
          ls ../examples
          echo "====================="
          ls ../examples/ex-gwf-twri01
      
      - name: Create full docs folder structure
        if: inputs.full == true
        run: |
          distname=${{ needs.build.outputs.distname }}

          # Create a skeleton of the distribution's folder structure to include in the docs
          mkdir -p "$distname/doc"
          mkdir "$distname/make"
          mkdir "$distname/msvs"
          mkdir "$distname/srcbmi"
          cp modflow6/code.json "$distname/code.json"
          cp modflow6/meson.build "$distname/meson.build"
          cp -r modflow6-examples/examples "$distname"
          cp -r modflow6/src "$distname"
          cp -r modflow6/utils "$distname"
          
          # create LaTeX file describing the folder structure
          cd modflow6/doc/ReleaseNotes
          python mk_folder_struct.py -dp "${{ github.workspace }}/$distname"

      - name: Build documentation
        env:
          # need a GITHUB_TOKEN to download example doc PDF asset from modflow6-examples repo
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          mkdir -p "${{ needs.build.outputs.distname }}/doc"
          cmd="python modflow6/distribution/build_docs.py -b bin -o doc -e modflow6-examples"
          if [[ "${{ inputs.full }}" == "true" ]]; then
            cmd="$cmd --full"
          fi
          eval "$cmd"
          mv "doc/ReleaseNotes.pdf" "doc/release.pdf"

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v3
        with:
          name: doc
          path: doc

  dist:
    name: Build distribution (${{ matrix.os }})
    needs:
      - build
      - docs
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
            ostag: linux
          - os: macos-12
            ostag: mac
          - os: windows-2022
            ostag: win64
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout modflow6
        uses: actions/checkout@v3
        with:
          repository: ${{ github.repository_owner }}/modflow6
          path: modflow6
          ref: ${{ inputs.branch }}

      - name: Checkout modflow6-examples
        uses: actions/checkout@v3
        with:
          repository: MODFLOW-USGS/modflow6-examples
          path: modflow6-examples

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: modflow6/environment.yml
          cache-downloads: true
          cache-environment: true
          init-shell: >-
            bash
            powershell

      - name: Setup Intel Fortran
        uses: modflowpy/install-intelfortran-action@v1
      
      - name: Update version
        id: update_version
        working-directory: modflow6/distribution
        run: |
          ver="${{ needs.build.outputs.version }}"
          cmd="python update_version.py -v $ver"
          if [[ "${{ inputs.approve }}" == "true" ]]; then
            cmd="$cmd --approve"
          fi
          if [[ "${{ inputs.developmode }}" == "false" ]]; then
            cmd="$cmd --releasemode"
          fi
          eval "$cmd"

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          # download artifacts to OS-specific directory
          path: ${{ needs.build.outputs.distname }}_${{ matrix.ostag }}

      - name: Select artifacts for OS
        run: |
          # create directory for OS-specific artifacts
          distname="${{ needs.build.outputs.distname }}"
          mkdir -p "$distname_${{ matrix.ostag }}/bin"

          # move binaries for current OS to distribution bin dir
          mv "$distname/bin-${{ runner.os }}" "$distname_${{ matrix.ostag }}/bin"

          # remove binaries for other OSes
          rm -rf "$distname/bin-*"

      - name: Build distribution
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          # build distribution
          distname="${{ needs.build.outputs.distname }}_${{ matrix.ostag }}"
          cmd="python modflow6/distribution/build_dist.py -o $distname -e modflow6-examples"
          if [[ "${{ inputs.full }}" == "true" ]]; then
            cmd="$cmd --full"
          fi
          eval "$cmd"

          # move & rename PDF documents to dist folder
          
          if [[ "${{ inputs.full }}" == "true" ]]; then
            mv "$distname/doc/converter_mf5to6.pdf" "$distname/doc/mf5to6.pdf"
          fi

      - name: Zip distribution
        if: runner.os != 'Windows'
        run: |
          distname="${{ needs.build.outputs.distname }}_${{ matrix.ostag }}"
          if [[ "${{ inputs.full }}" == "true" ]]; then
            zip -r $distname.zip \
              $distname/bin \
              $distname/src \
              $distname/srcbmi \
              $distname/doc \
              $distname/examples \
              $distname/make \
              $distname/msvs \
              $distname/utils \
              $distname/code.json \
              $distname/meson.build \
              -x '*.DS_Store' \
              -x '*libmf6.lib' \
              -x '*idmloader*' \
              -x '*pymake*' \
              -x '*obj_temp*' \
              -x '*mod_temp*'
          else
            zip -r $distname.zip \
              $distname/bin/* \
              $distname/doc/mf6io.pdf \
              $distname/doc/release.pdf \
              $distname/code.json \
              -x '*.DS_Store' \
              -x '*libmf6.lib' \
              -x '*idmloader*' \
              -x '*pymake*' \
              -x '*obj_temp*' \
              -x '*mod_temp*'
          fi

      - name: Zip distribution (Windows)
        if: runner.os == 'Windows'
        run: |
          distname="${{ needs.build.outputs.distname }}_${{ matrix.ostag }}"
          if [[ "${{ inputs.full }}" == "true" ]]; then
            7z a -tzip $distname.zip \
              $distname/bin \
              $distname/src \
              $distname/srcbmi \
              $distname/doc \
              $distname/examples \
              $distname/make \
              $distname/msvs \
              $distname/utils \
              $distname/code.json \
              $distname/meson.build \
              -xr!libmf6.lib \
              -xr!idmloader \
              -xr!pymake \
              -xr!obj_temp \
              -xr!mod_temp
          else
            7z a -tzip $distname.zip \
              $distname/bin/* \
              $distname/doc/mf6io.pdf \
              $distname/doc/release.pdf \
              $distname/code.json \
              -xr!libmf6.lib \
              -xr!idmloader \
              -xr!pymake \
              -xr!obj_temp \
              -xr!mod_temp
          fi

      # validate only after zipping distribution to avoid accidentally changing any files
      - name: Validate distribution
        run: |
          cmd="pytest -v -s modflow6/distribution/check_dist.py --path ${{ needs.build.outputs.distname }}_${{ matrix.ostag }}"
          if [[ "${{ inputs.approve }}" == "true" ]]; then
            cmd="$cmd --approved"
          fi
          if [[ "${{ inputs.developmode }}" == "false" ]]; then
             cmd="$cmd --releasemode"
          fi
          if [[ "${{ inputs.full }}" == "true" ]]; then
            cmd="$cmd --full"
          fi
          eval "$cmd"
      
      - name: Unzip (Windows)
        if: runner.os == 'Windows'
        run: |
          distname="${{ needs.build.outputs.distname }}_${{ matrix.ostag }}"
          7z x $distname.zip -o$distname
          rm -rf "$distname/bin-*"
          rm -rf "$distname/$distname"

      - name: Upload distribution zipfile artifact
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: "${{ needs.build.outputs.distname }}_${{ matrix.ostag }}"
          path: "${{ needs.build.outputs.distname }}_${{ matrix.ostag }}.zip"

      - name: Upload distribution zipfile artifact
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: "${{ needs.build.outputs.distname }}_${{ matrix.ostag }}"
          path: "${{ needs.build.outputs.distname }}_${{ matrix.ostag }}"

      - name: Upload release notes artifact
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: release_notes
          path: "${{ needs.build.outputs.distname }}_${{ matrix.ostag }}/doc/release.pdf"
