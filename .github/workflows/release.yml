name: MODFLOW 6 release
on:
  # workflow_call event lets this workflow be called either
  # from this repo or the nightly build repo for dev builds
  workflow_call:
    inputs:
      approve:
        description: 'Approve the release, modifying disclaimer language to indicate the distribution has been reviewed. If false, disclaimers & version strings indicate preliminary/provisional status.'
        required: false
        type: boolean
        default: false
      branch:
        description: 'Branch to release from.'
        required: true
        type: string
      compiler_toolchain:
        description: 'Compiler toolchain to use. For supported options see https://github.com/MODFLOW-USGS/modflow6/blob/develop/DEVELOPER.md#compiler-compatibility.'
        required: false
        type: string
        default: 'intel-classic'
      compiler_version:
        description: 'Compiler version to use. For supported options see https://github.com/MODFLOW-USGS/modflow6/blob/develop/DEVELOPER.md#compiler-compatibility.'
        required: false
        type: string
        default: '2021.7'
      developmode:
        description: 'Build binaries in develop mode. If false, IDEVELOPMODE is set to 0.'
        required: false
        type: boolean
        default: true
      full:
        description: 'Build a full distribution containing sources, examples, and all documentation. If false, the distribution contains only binaries, mf6io, release notes, and code.json.'
        required: false
        type: boolean
        default: false
      linux_version:
        description: 'Linux runner image to build binaries on.'
        required: false
        type: string
        default: 'ubuntu-20.04'
      run_tests:
        description: Run tests after building binaries.'
        required: false
        type: boolean
        default: true
      version:
        description: 'Version number to use for release.'
        required: true
        type: string
    outputs:
      version:
        description: 'Version number used for release'
        value: ${{ jobs.build.outputs.version }}
      distname:
        description: 'Distribution name used for release'
        value: ${{ jobs.build.outputs.distname }}
jobs:
  build:
    name: Build binaries (${{ matrix.os }}, parallel=${{ matrix.parallel }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ${{ inputs.linux_version }}
            compiler: ${{ inputs.compiler_toolchain }}
            version: ${{ inputs.compiler_version }}
            parallel: false
          - os: macos-13
            compiler: ${{ inputs.compiler_toolchain }}
            version: ${{ inputs.compiler_version }}
            parallel: false
          - os: macos-14
            compiler: gcc
            version: 13
            parallel: false
          - os: windows-2022
            compiler: ${{ inputs.compiler_toolchain }}
            version: ${{ inputs.compiler_version }}
            parallel: false
          - os: windows-2022
            compiler: intel-classic
            version: "2021.7"
            parallel: true
    defaults:
      run:
        shell: bash -l {0}
    outputs:
      version: ${{ steps.set_version.outputs.version }}
      distname: ${{ steps.set_version.outputs.distname }}
    steps:
      - name: Checkout modflow6
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/modflow6
          path: modflow6
          ref: ${{ inputs.branch }}

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: modflow6/environment.yml
          cache-downloads: true
          cache-environment: true
          init-shell: >-
            bash
            powershell

      - name: Setup ${{ matrix.compiler }} ${{ matrix.version }}
        if: (!(runner.os == 'Windows' && matrix.parallel))
        id: setup-fortran
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: ${{ matrix.compiler }}
          version: ${{ matrix.version }}
      
      - name: Set version number
        id: set_version
        run: |
          # distribution name format is 'mf<major.minor.patch[label]>'
          distname="mf${{ inputs.version }}"

          # set step outputs and environment variables
          echo "version=${{ inputs.version }}" >> "$GITHUB_OUTPUT"
          echo "VERSION=${{ inputs.version }}" >> "$GITHUB_ENV"
          echo "distname=$distname" >> "$GITHUB_OUTPUT"
          echo "DISTNAME=$distname" >> "$GITHUB_ENV"

      - name: Update version
        id: update_version
        working-directory: modflow6/distribution
        run: |
          ver="${{ steps.set_version.outputs.version }}"
          cmd="python update_version.py -v $ver"
          if [[ "${{ inputs.approve }}" == "true" ]]; then
            cmd="$cmd --approve"
          fi
          if [[ "${{ inputs.developmode }}" == "false" ]]; then
            cmd="$cmd --releasemode"
          fi
          eval "$cmd"

      - name: Get OS tag
        id: ostag
        run: |
          ostag=$(python -c "from modflow_devtools.ostags import get_ostag; print(get_ostag())")
          if [[ "${{ matrix.parallel }}" == "true" ]]; then
            ostag="${ostag}par"
          fi
          echo "ostag=$ostag" >> $GITHUB_OUTPUT

      # for statically linked gfortran ARM mac build
      - name: Hide dylibs (macOS)
        if: matrix.os == 'macos-14'
        run: |
          mv /opt/homebrew/opt/gcc/lib/gcc/current/libgfortran.5.dylib /opt/homebrew/opt/gcc/lib/gcc/current/libgfortran.5.dylib.bak
          mv /opt/homebrew/opt/gcc/lib/gcc/current/libquadmath.0.dylib /opt/homebrew/opt/gcc/lib/gcc/current/libquadmath.0.dylib.bak

      - name: Set LDFLAGS (macOS)
        if: runner.os == 'macOS'
        run: |
          os_ver=$(sw_vers -productVersion | cut -d'.' -f1)
          if (( "$os_ver" > 12 )); then
            ldflags="$LDFLAGS -Wl,-ld_classic"
            echo "LDFLAGS=$ldflags" >> $GITHUB_ENV
          fi

      - name: Build binaries
        if: (!(runner.os == 'Windows' && matrix.parallel))
        working-directory: modflow6
        run: |
          meson setup builddir -Ddebug=false --prefix=$(pwd) --libdir=bin
          meson install -C builddir
          meson test --verbose --no-rebuild -C builddir

      - name: Check architecture (macOS)
        working-directory: modflow6/bin
        if: runner.os == 'macOS'
        run: |
          otool -L mf6
          lipo -info mf6 

      - name: Build binaries (Windows)
        if: runner.os == 'Windows' && matrix.parallel && !inputs.run_tests
        uses: ./modflow6/.github/actions/build-par-win

      - name: Build and test binaries (Windows)
        if: runner.os == 'Windows' && matrix.parallel && inputs.run_tests
        uses: ./modflow6/.github/actions/test-par-win

      - name: Copy deps to bin dir
        if: runner.os == 'Windows' && matrix.parallel
        working-directory: modflow6/bin
        run: |
          # copy dependencies
          cp /c/Windows/SYSTEM32/ntdll.dll .
          cp /c/Windows/System32/KERNEL32.DLL .
          cp /c/Windows/System32/KERNELBASE.dll .
          cp /c/Windows/SYSTEM32/apphelp.dll .
          cp /c/Windows/System32/imagehlp.dll .
          cp /c/Windows/System32/ucrtbase.dll .
          cp /c/Windows/System32/WS2_32.dll .
          cp /c/Windows/System32/RPCRT4.dll .
          cp /c/Windows/System32/GDI32.dll .
          cp /c/Windows/System32/ADVAPI32.dll .
          cp /c/Windows/System32/win32u.dll .
          cp /c/Windows/System32/gdi32full.dll .
          cp /c/Windows/System32/msvcrt.dll .
          cp /c/Windows/System32/msvcp_win.dll .
          cp /c/Windows/System32/sechost.dll .
          cp /c/Windows/System32/USER32.dll .
          cp /c/Windows/System32/bcrypt.dll .
          cp /c/Windows/SYSTEM32/MSVCP140.dll .
          cp /c/Windows/SYSTEM32/VCRUNTIME140.dll .
          cp /c/Windows/SYSTEM32/VCRUNTIME140_1.dll .
          cp "/c/Program Files (x86)/Intel/oneAPI/compiler/latest/bin/libifcoremd.dll" .
          cp "/c/Program Files (x86)/Intel/oneAPI/compiler/latest/bin/libmmd.dll" .
          cp "/c/Program Files (x86)/Intel/oneAPI/mkl/latest/bin/mkl_sequential.2.dll" .
          cp "/c/Program Files (x86)/Intel/oneAPI/mpi/latest/bin/impi.dll" .
          cp "/c/Program Files (x86)/Intel/oneAPI/mpi/latest/bin/mpiexec.exe" .
          cp /d/a/modflow6/modflow6/petsc/arch-mswin-c-opt/lib/libpetsc.dll .

          # remove rebuilt and downloaded dirs
          rm -rf rebuilt
          rm -rf downloaded

      - name: Upload binaries
        uses: actions/upload-artifact@v3
        with:
          name: bin-${{ steps.ostag.outputs.ostag }}
          path: modflow6/bin

      - name: Checkout modflow6-testmodels
        if: inputs.run_tests == true && runner.os != 'Windows'
        uses: actions/checkout@v4
        with:
          repository: MODFLOW-USGS/modflow6-testmodels
          path: modflow6-testmodels

      - name: Checkout modflow6-examples
        if: inputs.run_tests == true && runner.os != 'Windows'
        uses: actions/checkout@v4
        with:
          repository: MODFLOW-USGS/modflow6-examples
          path: modflow6-examples

      - name: Update flopy
        if: inputs.run_tests == true && runner.os != 'Windows'
        working-directory: modflow6/autotest
        run: python update_flopy.py

      - name: Get executables
        if: inputs.run_tests == true && runner.os != 'Windows'
        working-directory: modflow6/autotest
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: pytest -v --durations 0 get_exes.py

      - name: Test modflow6
        if: inputs.run_tests == true && runner.os != 'Windows'
        working-directory: modflow6/autotest
        env:
          REPOS_PATH: ${{ github.workspace }}
        run: |
          markers="not large"
          if [[ "${{ inputs.developmode }}" == "false" ]]; then
            markers="$markers and not developmode"
          fi
          pytest -v -n auto --durations 0 -m "$markers"
      
      - name: Upload failed test output
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: failed-${{ matrix.os }}-${{ inputs.compiler_toolchain }}-${{ inputs.compiler_version }}
          path: modflow6/autotest/.failed
      
      # steps below run only on Linux to test distribution procedures, e.g.
      # compiling binaries, building documentation
      - name: Checkout usgslatex
        if: ${{ runner.os == 'Linux' && inputs.run_tests == true }}
        uses: actions/checkout@v4
        with:
          repository: MODFLOW-USGS/usgslatex
          path: usgslatex

      - name: Install TeX Live
        if: ${{ runner.os == 'Linux' && inputs.run_tests == true }}
        run: |
          sudo apt-get update
          sudo apt install texlive-science \
            texlive-latex-extra \
            texlive-font-utils \
            texlive-fonts-recommended \
            texlive-fonts-extra

      - name: Install USGS LaTeX style files and Univers font
        if: ${{ runner.os == 'Linux' && inputs.run_tests == true }}
        working-directory: usgslatex/usgsLaTeX
        run: sudo ./install.sh --all-users

      - name: Test distribution scripts
        if: ${{ inputs.run_tests == true }}
        working-directory: modflow6/distribution
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: pytest -v --durations 0

  docs:
    name: Build docs
    needs: build
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash -l {0}
    steps:

      - name: Checkout modflow6
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/modflow6
          path: modflow6
          ref: ${{ inputs.branch }}

      - name: Checkout modflow6-examples
        uses: actions/checkout@v4
        with:
          repository: MODFLOW-USGS/modflow6-examples
          path: modflow6-examples

      - name: Checkout usgslatex
        uses: actions/checkout@v4
        with:
          repository: MODFLOW-USGS/usgslatex
          path: usgslatex

      - name: Install TeX Live
        run: |
          sudo apt-get update
          sudo apt install texlive-science \
            texlive-latex-extra \
            texlive-font-utils \
            texlive-fonts-recommended \
            texlive-fonts-extra

      - name: Install USGS LaTeX style files and Univers font
        working-directory: usgslatex/usgsLaTeX
        run: sudo ./install.sh --all-users

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: modflow6/environment.yml
          cache-downloads: true
          cache-environment: true

      - name: Setup ${{ inputs.compiler_toolchain }} ${{ inputs.compiler_version }}
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: ${{ inputs.compiler_toolchain }}
          version: ${{ inputs.compiler_version }}

      - name: Update version
        id: update_version
        working-directory: modflow6/distribution
        run: |
          ver="${{ needs.build.outputs.version }}"
          cmd="python update_version.py -v $ver"
          if [[ "${{ inputs.approve }}" == "true" ]]; then
            cmd="$cmd --approve"
          fi
          if [[ "${{ inputs.developmode }}" == "false" ]]; then
            cmd="$cmd --releasemode"
          fi
          eval "$cmd"

      - name: Update FloPy classes
        working-directory: modflow6/autotest
        run: python update_flopy.py

      - name: Get OS tag
        id: ostag
        run: |
          ostag=$(python -c "from modflow_devtools.ostags import get_ostag; print(get_ostag())")
          echo "ostag=$ostag" >> $GITHUB_OUTPUT

      - name: Download pre-built binaries
        uses: actions/download-artifact@v3
        with:
          name: bin-${{ steps.ostag.outputs.ostag }}
          path: bin

      # execute permissions may not have survived artifact upload/download
      - name: Set executable permissions
        working-directory: modflow6-examples/etc
        run: |
          chmod +x "${{ github.workspace }}/bin/mf6"
          chmod +x "${{ github.workspace }}/bin/mf5to6"
          chmod +x "${{ github.workspace }}/bin/zbud6"
    
      - name: Install dependencies for building models
        if: inputs.full == true
        working-directory: modflow6-examples/etc
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          pip install -r requirements.pip.txt
          echo "${{ github.workspace }}/bin" >> $GITHUB_PATH
          get-modflow "${{ github.workspace }}/bin" --subset mf2005,triangle,gridgen

      - name: Build example models
        if: inputs.full == true
        working-directory: modflow6-examples/autotest
        run: pytest -v -n auto test_scripts.py --init
      
      - name: Create folder structure
        if: inputs.full == true
        run: |
          # Create empty folder structure for the <distname>/docs subdirectory
          distname=${{ needs.build.outputs.distname }}
          mkdir -p "$distname/doc"
          mkdir "$distname/make"
          mkdir "$distname/msvs"
          mkdir "$distname/srcbmi"
          cp modflow6/code.json "$distname/code.json"
          cp modflow6/meson.build "$distname/meson.build"
          cp -r modflow6-examples/examples "$distname"
          cp -r modflow6/src "$distname"
          cp -r modflow6/utils/mf5to6 "$distname/utils/mf5to6"
          cp -r modflow6/utils/zonebudget "$distname/utils/zonebudget"
          
          # create LaTeX file describing the folder structure
          cd modflow6/doc/ReleaseNotes
          python mk_folder_struct.py -dp "${{ github.workspace }}/$distname"

      - name: Collect deprecations
        working-directory: modflow6/doc/mf6io/mf6ivar
        run: |
          python deprecations.py
          cat md/deprecations.md

      - name: Upload deprecations
        uses: actions/upload-artifact@v3
        with:
          name: deprecations
          path: modflow6/doc/mf6io/mf6ivar/md/deprecations.md

      - name: Build documentation
        env:
          # this step is lazy about building the mf6 examples PDF document, first
          # trying to download a prebuilt PDF from MODFLOW-USGS/modflow6-examples,
          # so it needs a GITHUB_TOKEN.
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          mkdir -p "${{ needs.build.outputs.distname }}/doc"
          cmd="python modflow6/distribution/build_docs.py -b bin -o doc"
          if [[ "${{ inputs.full }}" == "true" ]]; then
            cmd="$cmd --full"
          fi
          eval "$cmd"
          mv "doc/ReleaseNotes.pdf" "doc/release.pdf"

      - name: Upload documentation artifact
        uses: actions/upload-artifact@v3
        with:
          name: doc
          path: doc

  dist:
    name: Build distribution (${{ matrix.os }})
    needs:
      - build
      - docs
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-22.04
          - os: macos-13
          - os: macos-14
          - os: windows-2022
            parallel: false
          - os: windows-2022
            parallel: true
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout modflow6
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/modflow6
          path: modflow6
          ref: ${{ inputs.branch }}

      - name: Checkout modflow6-examples
        uses: actions/checkout@v4
        with:
          repository: MODFLOW-USGS/modflow6-examples
          path: modflow6-examples

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: modflow6/environment.yml
          cache-downloads: true
          cache-environment: true
          init-shell: >-
            bash
            powershell

      - name: Setup ${{ inputs.compiler_toolchain }} ${{ inputs.compiler_version }}
        uses: fortran-lang/setup-fortran@v1
        with:
          compiler: ${{ inputs.compiler_toolchain }}
          version: ${{ inputs.compiler_version }}
      
      - name: Update version
        id: update_version
        working-directory: modflow6/distribution
        run: |
          ver="${{ needs.build.outputs.version }}"
          cmd="python update_version.py -v $ver"
          if [[ "${{ inputs.approve }}" == "true" ]]; then
            cmd="$cmd --approve"
          fi
          if [[ "${{ inputs.developmode }}" == "false" ]]; then
            cmd="$cmd --releasemode"
          fi
          eval "$cmd"
 
      - name: Get OS tag
        id: ostag
        run: |
          ostag=$(python -c "from modflow_devtools.ostags import get_ostag; print(get_ostag())")
          if [[ "${{ matrix.parallel }}" == "true" ]]; then
            ostag="${ostag}par"
          fi
          echo "ostag=$ostag" >> $GITHUB_OUTPUT

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ${{ needs.build.outputs.distname }}_${{ steps.ostag.outputs.ostag }}
      
      - name: Select artifacts
        working-directory: ${{ needs.build.outputs.distname }}_${{ steps.ostag.outputs.ostag }}
        run: |
          echo "selecting ${{ steps.ostag.outputs.ostag }} artifacts"
          # remove dists for other systems
          rm -rf ${{ needs.build.outputs.distname }}_*
          # remove release notes
          rm -rf release_notes
          # rename dist bin directory
          mv bin-${{ steps.ostag.outputs.ostag }} bin
          # remove binaries for other systems
          rm -rf bin-*

          echo "dist directory contains:"
          ls
      
      - name: Install dependencies for example models
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          pip install -r modflow6-examples/etc/requirements.pip.txt
          distname="${{ needs.build.outputs.distname }}_${{ steps.ostag.outputs.ostag }}"
          echo "$distname/bin" >> $GITHUB_PATH
          # execute permissions may not have survived artifact upload/download
          chmod +x "$distname/bin/mf6"
          chmod +x "$distname/bin/mf5to6"
          chmod +x "$distname/bin/zbud6"

      # the example models also need mf2005, triangle and gridgen
      - name: Install extra executables
        uses: modflowpy/install-modflow-action@v1
        with:
          subset: mf2005,triangle,gridgen

      - name: Update Flopy
        working-directory: modflow6/autotest
        run: python update_flopy.py
  
      - name: Build example models
        if: inputs.full == true
        working-directory: modflow6-examples/autotest
        run: pytest -v -n auto test_scripts.py --init

      - name: Build distribution
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          # build distribution
          distname="${{ needs.build.outputs.distname }}_${{ steps.ostag.outputs.ostag }}"
          cmd="python modflow6/distribution/build_dist.py -o $distname -e modflow6-examples"
          if [[ "${{ inputs.full }}" == "true" ]]; then
            cmd="$cmd --full"
          fi
          eval "$cmd"

          # rename PDF documents
          if [[ "${{ inputs.full }}" == "true" ]]; then
            mv "$distname/doc/converter_mf5to6.pdf" "$distname/doc/mf5to6.pdf"
          fi

      - name: Zip distribution
        if: runner.os != 'Windows'
        run: |
          distname="${{ needs.build.outputs.distname }}_${{ steps.ostag.outputs.ostag }}"
          if [[ "${{ inputs.full }}" == "true" ]]; then
            zip -r $distname.zip \
              $distname/bin \
              $distname/src \
              $distname/srcbmi \
              $distname/doc \
              $distname/examples \
              $distname/make \
              $distname/msvs \
              $distname/utils \
              $distname/code.json \
              $distname/meson.build \
              $distname/meson.options \
              -x '*.DS_Store' \
              -x '*libmf6.lib' \
              -x '*idmloader*' \
              -x '*obj_temp*' \
              -x '*mod_temp*'
          else
            zip -r $distname.zip \
              $distname/bin/* \
              $distname/doc/mf6io.pdf \
              $distname/doc/release.pdf \
              $distname/code.json \
              -x '*.DS_Store' \
              -x '*libmf6.lib' \
              -x '*idmloader*' \
              -x '*obj_temp*' \
              -x '*mod_temp*'
          fi

      - name: Zip distribution (Windows)
        if: runner.os == 'Windows'
        run: |
          distname="${{ needs.build.outputs.distname }}_${{ steps.ostag.outputs.ostag }}"
          if [[ "${{ inputs.full }}" == "true" ]]; then
            7z a -tzip $distname.zip \
              $distname/bin \
              $distname/src \
              $distname/srcbmi \
              $distname/doc \
              $distname/examples \
              $distname/make \
              $distname/msvs \
              $distname/utils \
              $distname/code.json \
              $distname/meson.build \
              $distname/meson.options \
              -xr!libmf6.lib \
              -xr!idmloader \
              -xr!obj_temp \
              -xr!mod_temp
          else
            7z a -tzip $distname.zip \
              $distname/bin/* \
              $distname/doc/mf6io.pdf \
              $distname/doc/release.pdf \
              $distname/code.json \
              -xr!libmf6.lib \
              -xr!idmloader \
              -xr!obj_temp \
              -xr!mod_temp
          fi

      - name: Upload distribution
        uses: actions/upload-artifact@v3
        with:
          name: "${{ needs.build.outputs.distname }}_${{ steps.ostag.outputs.ostag }}"
          path: "${{ needs.build.outputs.distname }}_${{ steps.ostag.outputs.ostag }}.zip"

      - name: Upload release notes
        if: runner.os == 'Linux'
        uses: actions/upload-artifact@v3
        with:
          name: release_notes
          path: "${{ needs.build.outputs.distname }}_${{ steps.ostag.outputs.ostag }}/doc/release.pdf"

      - name: Check distribution
        run: |
          # unzip and validate the archive
          distname="${{ needs.build.outputs.distname }}_${{ steps.ostag.outputs.ostag }}"
          distfile="$distname.zip"
          checkdir="check"
          mkdir $checkdir
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            7z x $distfile -o$checkdir
          else
            unzip $distfile -d $checkdir
          fi

          cmd="pytest -v -s modflow6/distribution/check_dist.py --path $checkdir/$distname"
          if [[ "${{ inputs.approve }}" == "true" ]]; then
            cmd="$cmd --approved"
          fi
          if [[ "${{ inputs.developmode }}" == "false" ]]; then
             cmd="$cmd --releasemode"
          fi
          if [[ "${{ inputs.full }}" == "true" ]]; then
            cmd="$cmd --full"
          fi
          eval "$cmd"