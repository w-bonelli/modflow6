name: MODFLOW 6 continuous integration
on:
  push:
    branches:
      - master
      - develop
      - ci-diagnose*
      - win-petsc
    paths-ignore:
      - "**.md"
      - "doc/**"
  pull_request:
    branches:
      - master
      - develop
jobs:
  # lint:
  #   name: Lint (fprettify)
  #   runs-on: ubuntu-latest
  #   defaults:
  #     run:
  #       shell: bash -l {0}
  #   steps:
  #     - name: Checkout modflow6
  #       uses: actions/checkout@v3

  #     - name: Setup Micromamba
  #       uses: mamba-org/setup-micromamba@v1
  #       with:
  #         environment-file: environment.yml
  #         cache-environment: true
  #         cache-downloads: true

  #     - name: Check Fortran source formatting
  #       run: python .github/common/fortran_format_check.py

  # build:
  #   name: Build (gfortran 12)
  #   runs-on: ubuntu-22.04
  #   defaults:
  #     run:
  #       shell: bash -l {0}
  #   env:
  #     FC: gfortran
  #     GCC_V: 12
  #   steps:
  #     - name: Checkout modflow6
  #       uses: actions/checkout@v3

  #     - name: Setup gfortran ${{ env.GCC_V }}
  #       uses: awvwgk/setup-fortran@main
  #       with:
  #         compiler: gcc
  #         version: ${{ env.GCC_V }}

  #     - name: Setup Micromamba
  #       uses: mamba-org/setup-micromamba@v1
  #       with:
  #         environment-file: environment.yml
  #         cache-environment: true
  #         cache-downloads: true

  #     - name: Meson setup
  #       run: meson setup builddir -Ddebug=false -Dwerror=true

  #     - name: Meson compile
  #       run: meson compile -C builddir

  #     - name: Meson test
  #       run: meson test --verbose --no-rebuild -C builddir

  # smoke_test:
  #   name: Smoke test (gfortran 12)
  #   runs-on: ubuntu-22.04
  #   defaults:
  #     run:
  #       shell: bash -l {0}
  #   env:
  #     FC: gfortran
  #     GCC_V: 12
  #   steps:
  #     - name: Checkout modflow6
  #       uses: actions/checkout@v3
  #       with:
  #         path: modflow6

  #     - name: Setup GNU Fortran ${{ env.GCC_V }}
  #       uses: awvwgk/setup-fortran@main
  #       with:
  #         compiler: gcc
  #         version: ${{ env.GCC_V }}

  #     - name: Setup Micromamba
  #       uses: mamba-org/setup-micromamba@v1
  #       with:
  #         environment-file: modflow6/environment.yml
  #         cache-environment: true
  #         cache-downloads: true

  #     - name: Build modflow6
  #       working-directory: modflow6
  #       run: |
  #         meson setup builddir -Ddebug=false --prefix=$(pwd) --libdir=bin
  #         meson install -C builddir
  #         meson test --verbose --no-rebuild -C builddir

  #     - name: Update flopy
  #       working-directory: modflow6/autotest
  #       run: python update_flopy.py

  #     - name: Get executables
  #       working-directory: modflow6/autotest
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       run: pytest -v --durations 0 get_exes.py

  #     - name: Test programs
  #       working-directory: modflow6/autotest
  #       run: |
  #         if [ "${{ github.ref_name }}" == "master" ]; then
  #           pytest -v -n auto --durations 0 -m "not slow and not regression and not developmode"
  #         else
  #           pytest -v -n auto --durations 0 -S
  #         fi

  # test_gfortran_latest:
  #   name: Test (gfortran 12)
  #   needs:
  #     - lint
  #     - build
  #     - smoke_test
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-22.04, macos-12, windows-2022]
  #   defaults:
  #     run:
  #       shell: bash -l {0}
  #   env:
  #     FC: gfortran
  #     GCC_V: 12
  #   steps:
  #     - name: Checkout modflow6
  #       uses: actions/checkout@v3
  #       with:
  #         path: modflow6

  #     - name: Checkout modflow6-testmodels
  #       uses: actions/checkout@v3
  #       with:
  #         repository: MODFLOW-USGS/modflow6-testmodels
  #         path: modflow6-testmodels

  #     - name: Setup GNU Fortran ${{ env.GCC_V }}
  #       uses: awvwgk/setup-fortran@main
  #       with:
  #         compiler: gcc
  #         version: ${{ env.GCC_V }}

  #     - name: Setup Micromamba
  #       uses: mamba-org/setup-micromamba@v1
  #       with:
  #         environment-file: modflow6/environment.yml
  #         init-shell: >-
  #           bash
  #           powershell
  #         cache-environment: true
  #         cache-downloads: true

  #     - name: Build modflow6
  #       working-directory: modflow6
  #       run: |
  #         meson setup builddir -Ddebug=false --prefix=$(pwd) --libdir=bin
  #         meson install -C builddir
  #         meson test --verbose --no-rebuild -C builddir

  #     - name: Update flopy
  #       working-directory: modflow6/autotest
  #       run: python update_flopy.py

  #     - name: Get executables
  #       working-directory: modflow6/autotest
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       run: pytest -v --durations 0 get_exes.py

  #     - name: Test programs
  #       working-directory: modflow6/autotest
  #       env:
  #         REPOS_PATH: ${{ github.workspace }}
  #       run: |
  #         if [ "${{ github.ref_name }}" == "master" ]; then
  #           pytest -v -n auto --durations 0 -m "not large and not developmode"
  #         else
  #           pytest -v -n auto --durations 0 -m "not large"
  #         fi

  #     - name: Test scripts
  #       working-directory: modflow6/distribution
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       run: pytest -v --durations 0

  # test_gfortran_previous:
  #   name: Test gfortran (${{ matrix.GCC_V }}, ${{ matrix.os }})
  #   needs:
  #     - lint
  #     - build
  #     - smoke_test
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-20.04]
  #       GCC_V: [7, 8, 9, 10, 11]
  #   defaults:
  #     run:
  #       shell: bash -l {0}
  #   env:
  #     FC: gfortran
  #   steps:
  #     - name: Checkout modflow6
  #       uses: actions/checkout@v3
  #       with:
  #         path: modflow6

  #     - name: Checkout modflow6-testmodels
  #       uses: actions/checkout@v3
  #       with:
  #         repository: MODFLOW-USGS/modflow6-testmodels
  #         path: modflow6-testmodels

  #     - name: Setup GNU Fortran ${{ matrix.GCC_V }}
  #       uses: awvwgk/setup-fortran@main
  #       with:
  #         compiler: gcc
  #         version: ${{ matrix.GCC_V }}

  #     - name: Setup Micromamba
  #       uses: mamba-org/setup-micromamba@v1
  #       with:
  #         environment-file: modflow6/environment.yml
  #         cache-downloads: true
  #         cache-environment: true

  #     - name: Update flopy
  #       working-directory: modflow6/autotest
  #       run: python update_flopy.py

  #     - name: Build modflow6
  #       working-directory: modflow6
  #       run: |
  #         meson setup builddir -Ddebug=false --prefix=$(pwd) --libdir=bin
  #         meson install -C builddir
  #         meson test --verbose --no-rebuild -C builddir

  #     - name: Get executables
  #       working-directory: modflow6/autotest
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       run: pytest -v --durations 0 get_exes.py

  #     - name: Test modflow6
  #       working-directory: modflow6/autotest
  #       env:
  #         REPOS_PATH: ${{ github.workspace }}
  #       run: |
  #         if [ "${{ github.ref_name }}" == "master" ]; then
  #           pytest -v -n auto --durations 0 -m "not large and not developmode"
  #         else
  #           pytest -v -n auto --durations 0 -m "not large"
  #         fi

  # test_ifort:
  #   name: Test (ifort)
  #   needs:
  #     - lint
  #     - build
  #     - smoke_test
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-latest, macos-latest, windows-latest]
  #   defaults:
  #     run:
  #       shell: bash -l {0}
  #   steps:
  #     - name: Checkout modflow6
  #       uses: actions/checkout@v3
  #       with:
  #         path: modflow6

  #     - name: Checkout modflow6-testmodels
  #       uses: actions/checkout@v3
  #       with:
  #         repository: MODFLOW-USGS/modflow6-testmodels
  #         path: modflow6-testmodels

  #     - name: Setup Micromamba
  #       uses: mamba-org/setup-micromamba@v1
  #       with:
  #         environment-file: modflow6/environment.yml
  #         init-shell: >-
  #           bash
  #           powershell
  #         cache-environment: true
  #         cache-downloads: true

  #     - name: Setup Intel Fortran
  #       uses: modflowpy/install-intelfortran-action@v1

  #     - name: Fix Micromamba path (Windows)
  #       if: runner.os == 'Windows'
  #       shell: pwsh
  #       run: |
  #         # https://github.com/modflowpy/install-intelfortran-action#conda-scripts
  #         $mamba_bin = "C:\Users\runneradmin\micromamba-root\envs\modflow6\Scripts"
  #         echo $mamba_bin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

  #     - name: Update version files
  #       working-directory: modflow6/distribution
  #       run: python update_version.py

  #     - name: Build modflow6
  #       if: runner.os != 'Windows'
  #       working-directory: modflow6
  #       run: |
  #         meson setup builddir -Ddebug=false --prefix=$(pwd) --libdir=bin
  #         meson install -C builddir
  #         meson test --verbose --no-rebuild -C builddir

  #     - name: Build modflow6 (Windows)
  #       if: runner.os == 'Windows'
  #       working-directory: modflow6
  #       shell: pwsh
  #       run: |
  #         meson setup builddir -Ddebug=false --prefix=$(pwd) --libdir=bin
  #         meson install -C builddir
  #         meson test --verbose --no-rebuild -C builddir

  #     - name: Update flopy
  #       working-directory: modflow6/autotest
  #       run: python update_flopy.py

  #     - name: Get executables
  #       if: runner.os != 'Windows'
  #       working-directory: modflow6/autotest
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       run: pytest -v --durations 0 get_exes.py

  #     - name: Get executables (Windows)
  #       if: runner.os == 'Windows'
  #       working-directory: modflow6/autotest
  #       shell: pwsh
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       run: pytest -v --durations 0 get_exes.py

  #     - name: Test programs
  #       if: runner.os != 'Windows'
  #       working-directory: modflow6/autotest
  #       env:
  #         REPOS_PATH: ${{ github.workspace }}
  #       run: |
  #         if [ "${{ github.ref_name }}" == "master" ]; then
  #           pytest -v -n auto --durations 0 -m "not large and not developmode"
  #         else
  #           pytest -v -n auto --durations 0 -m "not large"
  #         fi

  #     - name: Test programs (Windows)
  #       if: runner.os == 'Windows'
  #       working-directory: modflow6/autotest
  #       shell: pwsh
  #       env:
  #         REPOS_PATH: ${{ github.workspace }}
  #       run: |
  #         if ( "${{ github.ref_name }}" -eq "master" ) {
  #           pytest -v -n auto --durations 0 -m "not large and not developmode"
  #         } else {
  #           pytest -v -n auto --durations 0 -m "not large"
  #         }

  #     - name: Test scripts
  #       if: runner.os != 'Windows'
  #       working-directory: modflow6/distribution
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       run: pytest -v --durations 0

  #     - name: Test scripts (Windows)
  #       if: runner.os == 'Windows'
  #       working-directory: modflow6/distribution
  #       shell: pwsh
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       run: pytest -v --durations 0

  # parallel_test:
  #   name: Parallel testing
  #   needs:
  #     - lint
  #     - build
  #     - smoke_test
  #   runs-on: ${{ matrix.os }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       os: [ubuntu-22.04, macos-12] #, windows-2022 ]
  #   defaults:
  #     run:
  #       shell: bash -l {0}
  #   env:
  #     FC: gfortran
  #     GCC_V: 12
  #   steps:
  #     - name: Checkout modflow6
  #       uses: actions/checkout@v3
  #       with:
  #         path: modflow6

  #     - name: Setup MSYS2
  #       if: runner.os == 'Windows'
  #       uses: msys2/setup-msys2@v2
  #       with:
  #         update: true
  #         install: |
  #           git
  #           make
  #           mingw-w64-x86_64-gcc
  #           mingw-w64-x86_64-python
  #           mingw-w64-x86_64-python-pip
  #           mingw-w64-x86_64-python-pytest

  #     - name: Setup MPI
  #       if: runner.os == 'Windows'
  #       uses: mpi4py/setup-mpi@v1
  #       with:
  #         mpi: msmpi

  #     - name: Setup GNU Fortran ${{ env.GCC_V }}
  #       uses: awvwgk/setup-fortran@main
  #       with:
  #         compiler: gcc
  #         version: ${{ env.GCC_V }}

  #     - name: Cache PETSc
  #       id: cache-petsc
  #       uses: actions/cache@v3
  #       with:
  #         path: petsc
  #         key: ${{ runner.os }}-petsc

  #     - name: Clone PETSc
  #       if: runner.os != 'Windows' && steps.cache-petsc.outputs.cache-hit != 'true'
  #       run: git clone -b release https://gitlab.com/petsc/petsc.git petsc

  #     - name: Download PETSc
  #       if: runner.os == 'Windows'
  #       run: |
  #         curl https://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-3.18.4.tar.gz -O -J
  #         mkdir petsc
  #         tar -xzf petsc-3.18.4.tar.gz -C petsc --strip-components=1

  #     - name: Configure environment
  #       if: runner.os == 'Linux'
  #       run: |
  #         echo "PKG_CONFIG_PATH=$GITHUB_WORKSPACE/petsc/linux-gnu/lib/pkgconfig" >> $GITHUB_ENV
  #         echo "$GITHUB_WORKSPACE/petsc/linux-gnu/bin" >> $GITHUB_PATH

  #     - name: Configure environment
  #       if: runner.os == 'macOS'
  #       run: |
  #         echo "PKG_CONFIG_PATH=$GITHUB_WORKSPACE/petsc/arch-darwin-gcc-debug/lib/pkgconfig" >> $GITHUB_ENV
  #         echo "$GITHUB_WORKSPACE/petsc/arch-darwin-gcc-debug/bin" >> $GITHUB_PATH

  #     - name: Configure PETSc
  #       if: runner.os == 'Linux'
  #       working-directory: petsc
  #       run: |
  #         sudo ./configure PETSC_ARCH=linux-gnu --download-fblaslapack --download-openmpi
  #         sudo make all

  #     - name: Configure PETSc
  #       if: runner.os == 'macOS'
  #       working-directory: petsc
  #       run: |
  #         sudo ./configure PETSC_DIR="$GITHUB_WORKSPACE/petsc" PETSC_ARCH=arch-darwin-gcc-debug --download-fblaslapack --download-openmpi
  #         sudo make all

  #     - name: Configure PETSc
  #       if: runner.os == 'Windows'
  #       shell: msys2 {0}
  #       working-directory: petsc
  #       run: |
  #         pacman -Syu
  #         pacman -Sy --noconfirm autoconf automake-wrapper bison bsdcpio make git \
  #           mingw-w64-x86_64-toolchain patch python flex \
  #           pkg-config pkgfile tar unzip mingw-w64-x86_64-cmake \
  #           mingw-w64-x86_64-msmpi mingw-w64-x86_64-openblas mingw-w64-x86_64-jq
  #         /usr/bin/python ./configure --with-mpiexec='/C/Program\ Files/Microsoft\ MPI/Bin/mpiexec' --with-shared-libraries=0
  #         make all

  #     - name: Setup Micromamba
  #       uses: mamba-org/setup-micromamba@v1
  #       with:
  #         environment-file: modflow6/environment.yml
  #         init-shell: >-
  #           bash
  #           powershell
  #         cache-environment: true
  #         cache-downloads: true

  #     - name: Build modflow6
  #       working-directory: modflow6
  #       run: |
  #         meson setup builddir -Ddebug=false -Dparallel=true --prefix=$(pwd) --libdir=bin
  #         meson install -C builddir
  #         meson test --verbose --no-rebuild -C builddir

  #     - name: Show Meson logs
  #       if: failure()
  #       working-directory: modflow6
  #       run: cat builddir/meson-logs/meson-log.txt

  #     - name: Update flopy
  #       working-directory: modflow6/autotest
  #       run: python update_flopy.py

  #     - name: Get executables
  #       working-directory: modflow6/autotest
  #       env:
  #         GITHUB_TOKEN: ${{ github.token }}
  #       run: pytest -v --durations 0 get_exes.py

  #     - name: Test programs (parallel)
  #       working-directory: modflow6/autotest
  #       env:
  #         REPOS_PATH: ${{ github.workspace }}
  #       run: |
  #         branch="${{ github.ref_name }}"
  #         marker="not large"
  #         markers=$([ "$branch" == "master" ] && echo "$marker and not developmode" || echo "$marker")
  #         pytest -v -n auto --parallel --durations 0 -m "$markers"

  parallel_test_windows:
    name: Parallel testing on Windows
    #needs:
    #  - lint
    #  - build
    #  - smoke_test
    runs-on: windows-2022
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout modflow6
        uses: actions/checkout@v3
        with:
          path: modflow6

      - name: Setup Micromamba
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: modflow6/environment.yml
          init-shell: >-
            bash
            powershell
          cache-environment: true
          cache-downloads: true

      - name: Setup Intel Fortran
        uses: w-bonelli/install-intelfortran-action@develop-mkl
        with:
          cache: false

      # - name: Setup Intel Fortran
      #   uses: ./modflow6

      - name: Fix Micromamba path (Windows)
        shell: pwsh
        run: |
          # https://github.com/modflowpy/install-intelfortran-action#conda-scripts
          $mamba_bin = "C:\Users\runneradmin\micromamba-root\envs\modflow6\Scripts"
          echo $mamba_bin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Set up Cygwin
        uses: egor-tensin/setup-cygwin@v4
        with:
          packages: python3 make curl

      - name: Adjust Cygwin
        shell: C:\tools\cygwin\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'
        run: |
          mv /usr/bin/link.exe /usr/bin/link-cygwin.exe

      - name: Cache PETSc
        id: cache-petsc
        uses: actions/cache@v3
        with:
          path: petsc
          key: ${{ runner.os }}-petsc

      - name: Download PETSc
        if: steps.cache-petsc.outputs.cache-hit != 'true'
        shell: C:\tools\cygwin\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'
        run: |
          curl https://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-3.18.5.tar.gz -O -J
          mkdir petsc
          tar -xzf petsc-3.18.5.tar.gz -C petsc --strip-components=1

      # start intel oneapi enabled pwsh, and from there cygwin
      - name: Configure PETSc
        shell: C:\tools\cygwin\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'
        run: |
          cd /home/runneradmin/petsc
          export PATH=/cygdrive/c/cygwin64/bin:$PATH
          export PETSC_ARCH=arch-impi-opt
          FC=ifort ./configure \
            --with-cc='win32fe cl' \
            --with-fc='win32fe ifort' \
            --with-cxx='win32fe cl' \
            --with-shared-libraries=0 \
            --with-debugging=no \
            --with-mpi-include='[/cygdrive/c/Progra~2/Intel/oneAPI/mpi/latest/include,/cygdrive/c/Progra~2/Intel/oneAPI/mpi/latest/include/ilp64]' \
            --with-mpi-lib='[/cygdrive/c/Progra~2/Intel/oneAPI/mpi/latest/lib/release/impi.lib,/cygdrive/c/Progra~2/Intel/oneAPI/mpi/latest/lib/release/impicxx.lib]' \
            --with-mpiexec=/cygdrive/c/Progra~2/Intel/oneAPI/mpi/latest/bin/mpiexec.exe \
            --with-blaslapack-dir=/cygdrive/c/Progra~2/Intel/oneAPI/mkl/latest/lib/intel64

      - name: Show PETSc log
        if: failure()
        shell: C:\tools\cygwin\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'
        run: cat /home/runneradmin/petsc/arch-impi-opt/lib/petsc/conf/configure.log

      - name: Build PETSc
        shell: C:\tools\cygwin\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'
        run: |
          cd /home/runneradmin/petsc
          sed "s/OMAKE_PRINTDIR.*=.*/OMAKE_PRINTDIR = \/usr\/bin\/make/g" arch-impi-opt/lib/petsc/conf/petscvariables
          sed "s/OMAKE.*=.*/OMAKE = \/usr\/bin\/make/g" arch-impi-opt/lib/petsc/conf/petscvariables
          make all

      # - name: Build modflow6
      #   working-directory: modflow6
      #   shell: pwsh
      #   run: |
      #     meson setup builddir -Ddebug=false -Dparallel=true --prefix=$(pwd) --libdir=bin
      #     meson install -C builddir
      #     meson test --verbose --no-rebuild -C builddir

      # - name: Show Meson logs
      #   if: failure()
      #   working-directory: modflow6
      #   run: cat builddir/meson-logs/meson-log.txt

      # - name: Update flopy
      #   working-directory: modflow6/autotest
      #   run: python update_flopy.py

      # - name: Get executables
      #   working-directory: modflow6/autotest
      #   env:
      #     GITHUB_TOKEN: ${{ github.token }}
      #   run: pytest -v --durations 0 get_exes.py

      # - name: Test programs (parallel)
      #   working-directory: modflow6/autotest
      #   env:
      #     REPOS_PATH: ${{ github.workspace }}
      #   run: |
      #     branch="${{ github.ref_name }}"
      #     marker="not large"
      #     markers=$([ "$branch" == "master" ] && echo "$marker and not developmode" || echo "$marker")
      #     pytest -v -n auto --parallel --durations 0 -m "$markers"
