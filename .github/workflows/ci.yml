name: MODFLOW 6 continuous integration
on:
  push:
    branches:
      - master
      - develop
      - ci-diagnose*
      - parallel-ci
    paths-ignore:
      - '**.md'
      - 'doc/**'
  pull_request:
    branches:
      - master
      - develop
    paths-ignore:
      - '**.md'
      - 'doc/**'
jobs:
  lint:
    name: Lint (fprettify)
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    steps:

      - name: Checkout modflow6
        uses: actions/checkout@v3

      - name: Setup Micromamba
        uses: mamba-org/provision-with-micromamba@main
        with:
          cache-downloads: true
          cache-env: true

      - name: Check Fortran source formatting
        run: python .github/common/fortran_format_check.py

  build:
    name: Build (gfortran 12)
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash -l {0}
    env:
      FC: gfortran
      GCC_V: 12
    steps:

      - name: Checkout modflow6
        uses: actions/checkout@v3
      
      - name: Setup gfortran ${{ env.GCC_V }}
        uses: awvwgk/setup-fortran@main
        with:
          compiler: gcc
          version: ${{ env.GCC_V }}

      - name: Setup Micromamba
        uses: mamba-org/provision-with-micromamba@main
        with:
          cache-downloads: true
          cache-env: true

      - name: Meson setup
        run: meson setup builddir -Ddebug=false -Dwerror=true

      - name: Meson compile
        run: meson compile -C builddir

      - name: Meson test
        run: meson test --verbose --no-rebuild -C builddir

  smoke_test:
    if: github.repository == 'MODFLOW-USGS/modflow6'
    name: Smoke test (gfortran 12)
    runs-on: ubuntu-22.04
    defaults:
      run:
        shell: bash -l {0}
    env:
      FC: gfortran
      GCC_V: 12
    steps:
      - name: Checkout modflow6
        uses: actions/checkout@v3
        with:
          path: modflow6

      - name: Setup GNU Fortran ${{ env.GCC_V }}
        uses: awvwgk/setup-fortran@main
        with:
          compiler: gcc
          version: ${{ env.GCC_V }}

      - name: Setup Micromamba
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: modflow6/environment.yml
          cache-downloads: true
          cache-env: true

      - name: Build modflow6
        working-directory: modflow6
        run: |
          meson setup builddir -Ddebug=false --prefix=$(pwd) --libdir=bin
          meson install -C builddir
          meson test --verbose --no-rebuild -C builddir

      - name: Update flopy
        working-directory: modflow6/autotest
        run: python update_flopy.py

      - name: Get executables
        working-directory: modflow6/autotest
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: pytest -v --durations 0 get_exes.py

      - name: Test programs
        working-directory: modflow6/autotest
        run: |
          if [ "${{ github.ref_name }}" == "master" ]; then
            pytest -v -n auto --durations 0 -m "not slow and not regression and not developmode"
          else
            pytest -v -n auto --durations 0 -S
          fi

  test_gfortran_latest:
    if: github.repository == 'MODFLOW-USGS/modflow6'
    name: Test (gfortran 12)
    needs:
      - lint
      - build
      - smoke_test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04, macos-12, windows-2022 ]
    defaults:
      run:
        shell: bash -l {0}
    env:
      FC: gfortran
      GCC_V: 12
    steps:
      - name: Checkout modflow6
        uses: actions/checkout@v3
        with:
          path: modflow6

      - name: Checkout modflow6-testmodels
        uses: actions/checkout@v3
        with:
          repository: MODFLOW-USGS/modflow6-testmodels
          path: modflow6-testmodels

      - name: Setup GNU Fortran ${{ env.GCC_V }}
        uses: awvwgk/setup-fortran@main
        with:
          compiler: gcc
          version: ${{ env.GCC_V }}

      - name: Setup Micromamba
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: modflow6/environment.yml
          cache-downloads: true
          cache-env: true

      - name: Build modflow6
        working-directory: modflow6
        run: |
          meson setup builddir -Ddebug=false --prefix=$(pwd) --libdir=bin
          meson install -C builddir
          meson test --verbose --no-rebuild -C builddir

      - name: Update flopy
        working-directory: modflow6/autotest
        run: python update_flopy.py

      - name: Get executables
        working-directory: modflow6/autotest
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: pytest -v --durations 0 get_exes.py

      - name: Test programs
        working-directory: modflow6/autotest
        env:
          REPOS_PATH: ${{ github.workspace }}
        run: |
          if [ "${{ github.ref_name }}" == "master" ]; then
            pytest -v -n auto --durations 0 -m "not large and not developmode"
          else
            pytest -v -n auto --durations 0 -m "not large"
          fi

      - name: Test scripts
        working-directory: modflow6/distribution
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: pytest -v --durations 0

  test_gfortran_previous:
    if: github.repository == 'MODFLOW-USGS/modflow6'
    name: Test gfortran (${{ matrix.GCC_V }}, ${{ matrix.os }})
    needs:
      - lint
      - build
      - smoke_test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-20.04 ]
        GCC_V: [ 7, 8, 9, 10, 11 ]
    defaults:
      run:
        shell: bash -l {0}
    env:
      FC: gfortran
    steps:

      - name: Checkout modflow6
        uses: actions/checkout@v3
        with:
          path: modflow6

      - name: Checkout modflow6-testmodels
        uses: actions/checkout@v3
        with:
          repository: MODFLOW-USGS/modflow6-testmodels
          path: modflow6-testmodels

      - name: Setup GNU Fortran ${{ matrix.GCC_V }}
        uses: awvwgk/setup-fortran@main
        with:
          compiler: gcc
          version: ${{ matrix.GCC_V }}

      - name: Setup Micromamba
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: modflow6/environment.yml
          cache-downloads: true
          cache-env: true

      - name: Update flopy
        working-directory: modflow6/autotest
        run: python update_flopy.py

      - name: Build modflow6
        working-directory: modflow6
        run: |
          meson setup builddir -Ddebug=false --prefix=$(pwd) --libdir=bin
          meson install -C builddir
          meson test --verbose --no-rebuild -C builddir
      
      - name: Get executables
        working-directory: modflow6/autotest
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: pytest -v --durations 0 get_exes.py

      - name: Test modflow6
        working-directory: modflow6/autotest
        env:
          REPOS_PATH: ${{ github.workspace }}
        run: |
          if [ "${{ github.ref_name }}" == "master" ]; then
            pytest -v -n auto --durations 0 -m "not large and not developmode"
          else
            pytest -v -n auto --durations 0 -m "not large"
          fi

  test_ifort:
    if: github.repository == 'MODFLOW-USGS/modflow6'
    name: Test (ifort)
    needs:
      - lint
      - build
      - smoke_test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-latest ]
    defaults:
      run:
        shell: bash -l {0}
    steps:

      - name: Checkout modflow6
        uses: actions/checkout@v3
        with:
          path: modflow6

      - name: Checkout modflow6-testmodels
        uses: actions/checkout@v3
        with:
          repository: MODFLOW-USGS/modflow6-testmodels
          path: modflow6-testmodels

      - name: Setup Micromamba
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: modflow6/environment.yml
          cache-downloads: true
          cache-env: true

      - name: Setup Intel Fortran
        uses: modflowpy/install-intelfortran-action@v1

      - name: Fix Micromamba path (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          # https://github.com/modflowpy/install-intelfortran-action#conda-scripts
          $mamba_bin = "C:\Users\runneradmin\micromamba-root\envs\modflow6\Scripts"
          echo $mamba_bin | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

      - name: Update version files
        working-directory: modflow6/distribution
        run: python update_version.py

      - name: Build modflow6
        if: runner.os != 'Windows'
        working-directory: modflow6
        run: |
          meson setup builddir -Ddebug=false --prefix=$(pwd) --libdir=bin
          meson install -C builddir
          meson test --verbose --no-rebuild -C builddir

      - name: Build modflow6 (Windows)
        if: runner.os == 'Windows'
        working-directory: modflow6
        shell: pwsh
        run: |
          meson setup builddir -Ddebug=false --prefix=$(pwd) --libdir=bin
          meson install -C builddir
          meson test --verbose --no-rebuild -C builddir

      - name: Update flopy
        working-directory: modflow6/autotest
        run: python update_flopy.py

      - name: Get executables
        if: runner.os != 'Windows'
        working-directory: modflow6/autotest
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: pytest -v --durations 0 get_exes.py
          
      - name: Get executables (Windows)
        if: runner.os == 'Windows'
        working-directory: modflow6/autotest
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: pytest -v --durations 0 get_exes.py

      - name: Test programs
        if: runner.os != 'Windows'
        working-directory: modflow6/autotest
        env:
          REPOS_PATH: ${{ github.workspace }}
        run: |
          if [ "${{ github.ref_name }}" == "master" ]; then
            pytest -v -n auto --durations 0 -m "not large and not developmode"
          else
            pytest -v -n auto --durations 0 -m "not large"
          fi

      - name: Test programs (Windows)
        if: runner.os == 'Windows'
        working-directory: modflow6/autotest
        shell: pwsh
        env:
          REPOS_PATH: ${{ github.workspace }}
        run: |
          if ( "${{ github.ref_name }}" -eq "master" ) {
            pytest -v -n auto --durations 0 -m "not large and not developmode"
          } else {
            pytest -v -n auto --durations 0 -m "not large"
          }

      - name: Test scripts
        if: runner.os != 'Windows'
        working-directory: modflow6/distribution
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: pytest -v --durations 0

      - name: Test scripts (Windows)
        if: runner.os == 'Windows'
        working-directory: modflow6/distribution
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: pytest -v --durations 0
        
  parallel_test:
    name: Parallel testing
    # needs:
    #   - lint
    #   - build
    #   - smoke_test
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-22.04, macos-12, windows-2022 ]
    defaults:
      run:
        shell: bash -l {0}
    steps:

      - name: Checkout modflow6
        uses: actions/checkout@v3
        with:
          path: modflow6

      - name: Setup MSYS2
        if: runner.os == 'Windows'
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: |
            git
            make
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-python
            mingw-w64-x86_64-python-pip
            mingw-w64-x86_64-python-pytest

      - name: Setup MPI
        if: runner.os == 'Windows'
        uses: mpi4py/setup-mpi@v1
        with:
          mpi: msmpi

      - name: Setup GNU Fortran 9
        # if: runner.os != 'Windows'
        uses: awvwgk/setup-fortran@main
        with:
          compiler: gcc
          version: 9
      
      # - name: Setup Intel Fortran
      #   if: runner.os == 'Windows'
      #   uses: modflowpy/install-intelfortran-action@v1

      - name: Cache PETSc
        id: cache-petsc
        uses: actions/cache@v3
        with:
          path: petsc
          key: ${{ runner.os }}-petsc

      - name: Clone PETSc
        if: runner.os != 'Windows' && steps.cache-petsc.outputs.cache-hit != 'true'
        run: git clone -b release https://gitlab.com/petsc/petsc.git petsc

      - name: Download PETSc
        if: runner.os == 'Windows'
        run: |
          curl https://ftp.mcs.anl.gov/pub/petsc/release-snapshots/petsc-3.18.4.tar.gz -O -J
          mkdir petsc
          tar -xzf petsc-3.18.4.tar.gz -C petsc --strip-components=1

      - name: Configure environment
        if: runner.os != 'Windows'
        run: |
          petsc_dir="$GITHUB_WORKSPACE/petsc"
          if [ "$RUNNER_OS" == "Linux" ]; then
            petsc_arch="linux-gnu" 
          elif [ "$RUNNER_OS" == "macOS" ]; then
            petsc_arch="arch-darwin-c-debug"
          # else
          #   petsc_arch="arch-mswin-c-debug"
          fi

          echo "PETSC_DIR=$petsc_dir" >> $GITHUB_ENV
          echo "PETSC_ARCH=$petsc_arch" >> $GITHUB_ENV
          echo "PKG_CONFIG_PATH=$petsc_dir/$petsc_arch/lib/pkgconfig" >> $GITHUB_ENV
          echo "$petsc_dir/$petsc_arch/bin" >> $GITHUB_PATH

      - name: Configure PETSc
        if: runner.os != 'Windows'
        working-directory: petsc
        run: |
          sudo ./configure PETSC_DIR=$PETSC_DIR PETSC_ARCH=$PETSC_ARCH --download-fblaslapack --download-openmpi
          sudo make all

      - name: Configure PETSc
        if: runner.os == 'Windows'
        shell: msys2 {0}
        working-directory: petsc
        run: |
          pacman -Syu
          pacman -Sy --noconfirm autoconf automake-wrapper bison bsdcpio make git \
            mingw-w64-x86_64-toolchain patch python flex \
            pkg-config pkgfile tar unzip mingw-w64-x86_64-cmake \
            mingw-w64-x86_64-msmpi mingw-w64-x86_64-openblas mingw-w64-x86_64-jq
          # /usr/bin/python ./configure PETSC_ARCH=$PETSC_ARCH --with-mpiexec='/C/Program\ Files/Microsoft\ MPI/Bin/mpiexec' --with-shared-libraries=0
          ls /C/Program\ Files/Microsoft\ MPI/Bin/mpiexec
          /usr/bin/python ../modflow6/.github/common/arch-ci-mswin-gnu.py
          make PETSC_ARCH="arch-mswin-c-debug" all

      - name: Setup Micromamba
        uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: modflow6/environment.yml
          cache-downloads: true
          cache-env: true

      - name: Build modflow6
        working-directory: modflow6
        run: |
          meson setup builddir -Ddebug=false -Dparallel=true --prefix=$(pwd) --libdir=bin
          meson install -C builddir
          meson test --verbose --no-rebuild -C builddir

      - name: Show Meson logs
        if: failure()
        working-directory: modflow6
        run: cat builddir/meson-logs/meson-log.txt

      - name: Update flopy
        working-directory: modflow6/autotest
        run: python update_flopy.py

      - name: Get executables
        working-directory: modflow6/autotest
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: pytest -v --durations 0 get_exes.py

      - name: Test programs (parallel)
        working-directory: modflow6/autotest
        env:
          REPOS_PATH: ${{ github.workspace }}
        run: |
          if [ "${{ github.ref_name }}" == "master" ]; then
            pytest -v -n auto --parallel --durations 0 -m "not large and not developmode"
          else
            pytest -v -n auto --parallel --durations 0 -m "not large"
          fi
          
